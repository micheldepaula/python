# O nome lambda vem da matem√°tica, mais precisamente da lambda calculus (c√°lculo lambda), 
# uma formaliza√ß√£o da computa√ß√£o criada por Alonzo Church nos anos 1930. 
# Esse sistema matem√°tico descreve como fun√ß√µes podem ser definidas e aplicadas ‚Äî sem usar nomes.
# 
# - Por que Python usa esse nome?
# Python adota lambda como uma refer√™ncia direta ao c√°lculo lambda, para indicar:
# - Que est√° criando uma fun√ß√£o an√¥nima (sem def e sem nome fixo).
# - Que essa fun√ß√£o tem apenas uma express√£o (simples, r√°pida, funcional).
# Sintaxe:
# lambda argumentos: express√£o
# lambda: 2 + 3
#
# üìå Explicando:
# - lambda x, y: x + y cria uma fun√ß√£o an√¥nima.
# 
# - soma = lambda x, y: x + y cria uma fun√ß√£o an√¥nima e atribui a variavel.
#
# - soma(4, 6) executa essa fun√ß√£o.
#
# - print(...) mostra o resultado da execu√ß√£o.

soma = lambda x, y: x + y
print(soma(4, 6)) # Sa√≠da: 10

# Isso √© o mesmo que escrever:
def soma(x, y):
 return x + y
print(soma(6, 12)) # Sa√≠da: 18

# üìå Explicando:
# - (lambda: 2 + 3) cria uma fun√ß√£o an√¥nima.
#
# - () executa essa fun√ß√£o imediatamente.
#
# - print(...) mostra o resultado da execu√ß√£o.

print((lambda: 2 + 3)()) # Sa√≠da: 5
 
# Onde o lambda √© mais usado:
# Em fun√ß√µes como map(), filter() e sorted().
# 
# Para callbacks simples.
# 
# Quando n√£o vale a pena criar uma fun√ß√£o com def s√≥ para uma l√≥gica curta.
# 
# Exemplo com sorted():

nomes = ['Jo√£o', 'ana', 'Carlos']
nomes_ordenados = sorted(nomes, key=lambda nome: nome.lower())
print(nomes_ordenados) # Sa√≠da: ['ana', 'Carlos', 'Jo√£o']
